#summary B-script engine.

= B-script =

Simple script engine.

== Status: ==

||_Beta_|| 

== Description: ==
Assembly-like Script Engine for Flash games.
Programming Language designed to be simple and portable.
== Features: ==

== Todos: ==
   * final clean up, add comments.
   * conditional compiling #if, debug print to file, i+information.

== License: ==

||Unkown||
||~~Open Source/MIT~~||
||~~Closed Source/Free~~||

== Labels: ==
   * languages C, AS3, HaXe
   * tools Alchemy, HaXe
== Pics: ==

== Demo: ==

== Source: ==

== DOC: ==

This page is still under construction.
=== BScript:===
The scripting/programming language.
==== Symbols:====
 * ||:||
 # *Description:* Bytecode indicator.
 # *Usage:*
{{{
newint:MyInt,+1234;
}}}

 * ||,||
 # *Description:* Parameters seperator.
 # *Usage:*
{{{
newint:MyInt,+1234;
}}}

 * ||;||
 # *Description:* End of a bytecode.
 # *Usage:*
{{{
newint:MyInt,+1234;
}}}

 * ||"||
 # *Description:* Begine/End of a string.
 # *Usage:*
{{{
"This Is A String";
}}}


 * ||+||
 # *Description:* Positive number indicator.
 # *Usage:*
{{{
newint:MyPInt,+1234;
}}}

 * ||-||
 # *Description:* Negative number indicator.
 # *Usage:*
{{{
newflt:MyNFlt,-1234.4321;
}}}

 * ||{||
 # *Description:* Begine of a label block.
 # *Usage:*
{{{
label:MyLabelName
{
/*Some Codes Here.*/
}
}}}

 * ||}||
 # *Description:* End of a label block.
 # *Usage:*
{{{
label:MyLabelName
{
/*Some Codes Here.*/
}
}}}

 * ||/*||
 # *Description:* Begine of a comment.
 # *Usage:*
{{{
/*This is a comment*/
}}}

 * ||*/||
 # *Description:* End of a comment.
 # *Usage:*
{{{
/*This is 
a comment*/
}}}
==== KeyWords:====
 * ||newint||
 # *Description:* Declare a new int type variable.
 # *Usage:*
{{{
newint:MyInt,+1234;
}}}
 * ||setint||
 # *Description:* Set values of int type variable.
 # *Usage:*
{{{
setint:MyInt,-4321;
}}}
 * ||delint||
 # *Description:* Delete a int type variable.
 # *Usage:*
{{{
delint:MyInt;
}}}

 * ||newflt||
 * ||setflt||
 * ||delflt||

 * ||newstr||
 * ||setstr||
 * ||delstr||

There are 9 build in local variables that you can use directly without declaration.

The variables are:
||Int type(3)||loci0:Use as input||loci1:Use as the second parameter  or flag||loci2: Use as output||

||Float type(3)||locf0:Use as input||locf1:Use as the second parameter or flag||locf2: Use as output||

||String type(3)||locs0:Use as input||locs1:Use as the second parameter or flag||locs2: Use as output||


 * ||setloci||
 # *Description:* Set the vaule of a local int type variable.
 # *Usage:*
{{{
setloci:0,123;
}}}

 * ||setlocf||
 * ||setlocs||
 # *Description:* Set the vaule of a local string type variable.
 # *Usage:*
{{{
setlocs:1,"MyString";
}}}

 * ||label||
 # *Description:* Declare a label.
 # *Usage:*
{{{
label:MyLabelName
{
setlocs:2,locs1;
}
}}}

 * ||goto||
 # *Description:* Jump to a specific label.
 # *Usage:*
{{{
goto:MyLabelName;
}}}

 * ||ifto||
 # *Description:* If the flag loci2>0, jump to a specific label.
 # *Usage:*
{{{
setloci:2,+1;
ifto:MyLabelName;
}}}

There are some build in functions which can be called by "call:function".
Some build in functions are 
||addi||subi||muli||divi||
||addf||subf||mulf||divf||
||itof||ftoi||itos||stoi||
||cat||cmp||
||print||
The build in functions can be extended by user.

 * ||call||
 # *Description:* Call a build in function.
The first parameter is locint0 or locflt0 or locstr0,

the second one is locint1 or locflt1 or locstr1,

and the returned value will be stored in locint2 or locflt2 or locstr2.


 # *Usage:*
{{{
/*Pass +1 as the first parameter for function add*/
setloci:0,+1;
/*Pass +1 as the second parameter for function add*/
setloci:1,+1;
/*return locint2=locint0+locint1*/
call:add;
/*
Pass +0 as the second parameter for function print,
which means print a int type local variable.
*/
setloci:0,+0;
/*
Pass +2 as the second parameter for function print,
which means print the int type local variable locint2.
*/
setloci:1,+2;
/*It should print 2.*/
call:print;
}}}

=== BSCompiler:===
The compiler for BScript. It compiles *.bs- BScript source files to *.bsc- bytecodes for BScript Virtual Machine.
=== The *.bs file format:===
Source files of BScript, generally a text file.
=== The *.bsc file format:===
Compiled *.bs file in binary byte format.

The structure:
{{{
Constant Pool
{
   ConstInts
   {
   ConstInt0:Int;
   ConstInt1:Int;
   ...
   }
   ConstFlts
   {
   ConstFlt0:Float;
   ConstFlt1:Float;
   ...
   }
   ConstStrs
   {
   ConstStr0:String;
   ConstStr1:String;
   ...
   } 
}
Labels
{
   TheMainLabel
   {
      LabelNameIndex:Int4;
      LabelLength:Int4;
      ByteCodes
      {   
          ByteCode0:Char;
          Parameter0Index:Int4;  
          (Parameter0Index:Int4;)
          ByteCode1:Char;
          Parameter0Index:Int4;  
          (Parameter0Index:Int4;)
          ...
      }
   }  
   SubLabel0
   {
      LabelNameIndex:Int4;
      LabelLength:Int4;
      ByteCodes
      {
      }
   }
   SubLabel1
   {
      ByteCodes
      {
      }
   }
...
}
}}}
The ByteCodes:
{{{
#define BC_newint 0x00
#define BC_delint 0x01
#define BC_setint 0x02

#define BC_newflt 0x10
#define BC_delflt 0x11
#define BC_setflt 0x12

#define BC_newstr 0x20
#define BC_delstr 0x21
#define BC_setstr 0x22

#define BC_setloci 0x30
#define BC_setlocf 0x31
#define BC_setlocs 0x32

#define BC_itof 0x40
#define BC_ftoi 0x41
#define BC_stoi 0x42
#define BC_itos 0x43

#define BC_goto 0x50
#define BC_ifto 0x51
#define BC_call 0x52
}}}
=== BSVM:===
The Virtual Machine of BScript, which can execute *.bsc bytecodes.
 * ||Static Memory||
{{{

}}}

 * ||Dynamic Memory||
{{{

}}}
 
 * ||Pause:State||
 * ||Run:State||
 * ||Stop:State||

== Blog Posts: ==

== Links: ==